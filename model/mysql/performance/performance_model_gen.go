// Code generated by goctl. DO NOT EDIT.

package performance

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	performanceFieldNames          = builder.RawFieldNames(&Performance{})
	performanceRows                = strings.Join(performanceFieldNames, ",")
	performanceRowsExpectAutoSet   = strings.Join(stringx.Remove(performanceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	performanceRowsWithPlaceHolder = strings.Join(stringx.Remove(performanceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	performanceModel interface {
		Insert(ctx context.Context, data *Performance) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Performance, error)
		Update(ctx context.Context, data *Performance) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPerformanceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Performance struct {
		Id             int64     `db:"id"`               // ID
		Title          string    `db:"title"`            // 标题
		Description    string    `db:"description"`      // 描述
		City           string    `db:"city"`             // 所在城市
		Address        string    `db:"address"`          // 具体地址
		PrioritySaleAt int64     `db:"priority_sale_at"` // 优先购开售时间
		SaleAt         int64     `db:"sale_at"`          // 开售时间
		CreatedAt      time.Time `db:"created_at"`       // 创建时间
		UpdatedAt      time.Time `db:"updated_at"`       // 更新时间
		IsDel          int64     `db:"is_del"`           // 是否删除: 0=未指定、1=是、2=否: 默认=2
	}
)

func newPerformanceModel(conn sqlx.SqlConn) *defaultPerformanceModel {
	return &defaultPerformanceModel{
		conn:  conn,
		table: "`performance`",
	}
}

func (m *defaultPerformanceModel) withSession(session sqlx.Session) *defaultPerformanceModel {
	return &defaultPerformanceModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`performance`",
	}
}

func (m *defaultPerformanceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPerformanceModel) FindOne(ctx context.Context, id int64) (*Performance, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", performanceRows, m.table)
	var resp Performance
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPerformanceModel) Insert(ctx context.Context, data *Performance) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, performanceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Description, data.City, data.Address, data.PrioritySaleAt, data.SaleAt, data.IsDel)
	return ret, err
}

func (m *defaultPerformanceModel) Update(ctx context.Context, data *Performance) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, performanceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Description, data.City, data.Address, data.PrioritySaleAt, data.SaleAt, data.IsDel, data.Id)
	return err
}

func (m *defaultPerformanceModel) tableName() string {
	return m.table
}
