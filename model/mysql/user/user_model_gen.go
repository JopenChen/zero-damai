// Code generated by goctl. DO NOT EDIT.

package user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id         int64     `db:"id"`         // 用户ID
		Name       string    `db:"name"`       // 姓名
		Nickname   string    `db:"nickname"`   // 昵称
		Avatar     string    `db:"avatar"`     // 头像
		Background string    `db:"background"` // 个人中心背景图
		Mobile     string    `db:"mobile"`     // 手机号
		Password   string    `db:"password"`   // 密码
		Mail       string    `db:"mail"`       // 邮箱地址
		Identity   string    `db:"identity"`   // 身份证号
		Gender     int64     `db:"gender"`     // 性别: 0=未指定、1=男、2=女、3=第三性别、4=保密: 默认=4
		Nation     string    `db:"nation"`     // 民族
		Birthday   int64     `db:"birthday"`   // 出生日期
		Address    string    `db:"address"`    // 收货地址
		Audience   string    `db:"audience"`   // 观影人信息,格式：[{"name":"xxx","identity_type": 1,"identity_number"}],identity 可选值：1=身份证、2=港澳台居民居住证、3=港澳居民来往内地通行证、4=台湾居民来往大陆通行证、5=护照、6=外国人永久居留身份证
		Status     int64     `db:"status"`     // 是否禁用: 0=未指定、1=开启、2=禁用: 默认=1
		LoginAt    time.Time `db:"login_at"`   // 登录时间
		CreatedAt  time.Time `db:"created_at"` // 创建时间
		UpdatedAt  time.Time `db:"updated_at"` // 更新时间
		IsDel      int64     `db:"is_del"`     // 是否删除: 0=未指定、1=是、2=否: 默认=2
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) withSession(session sqlx.Session) *defaultUserModel {
	return &defaultUserModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Nickname, data.Avatar, data.Background, data.Mobile, data.Password, data.Mail, data.Identity, data.Gender, data.Nation, data.Birthday, data.Address, data.Audience, data.Status, data.LoginAt, data.IsDel)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Nickname, data.Avatar, data.Background, data.Mobile, data.Password, data.Mail, data.Identity, data.Gender, data.Nation, data.Birthday, data.Address, data.Audience, data.Status, data.LoginAt, data.IsDel, data.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
