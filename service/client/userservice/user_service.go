// Code generated by goctl. DO NOT EDIT.
// Source: service.proto

package userservice

import (
	"context"

	"service/service_pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EmptyResp                      = service_pb.EmptyResp
	FilterItem                     = service_pb.FilterItem
	LoginReq                       = service_pb.LoginReq
	LoginResp                      = service_pb.LoginResp
	Order                          = service_pb.Order
	OrderAddReq                    = service_pb.OrderAddReq
	OrderAddResp                   = service_pb.OrderAddResp
	OrderRemoveReq                 = service_pb.OrderRemoveReq
	OrderRetrieveReq               = service_pb.OrderRetrieveReq
	OrderRetrieveResp              = service_pb.OrderRetrieveResp
	OrderUpdateReq                 = service_pb.OrderUpdateReq
	Paging                         = service_pb.Paging
	Performance                    = service_pb.Performance
	PerformanceAddReq              = service_pb.PerformanceAddReq
	PerformanceAddResp             = service_pb.PerformanceAddResp
	PerformanceRemoveReq           = service_pb.PerformanceRemoveReq
	PerformanceRetrieveReq         = service_pb.PerformanceRetrieveReq
	PerformanceRetrieveResp        = service_pb.PerformanceRetrieveResp
	PerformanceSeat                = service_pb.PerformanceSeat
	PerformanceSeatAddReq          = service_pb.PerformanceSeatAddReq
	PerformanceSeatAddResp         = service_pb.PerformanceSeatAddResp
	PerformanceSeatRemoveReq       = service_pb.PerformanceSeatRemoveReq
	PerformanceSeatRetrieveReq     = service_pb.PerformanceSeatRetrieveReq
	PerformanceSeatRetrieveResp    = service_pb.PerformanceSeatRetrieveResp
	PerformanceSeatUpdateReq       = service_pb.PerformanceSeatUpdateReq
	PerformanceSession             = service_pb.PerformanceSession
	PerformanceSessionAddReq       = service_pb.PerformanceSessionAddReq
	PerformanceSessionAddResp      = service_pb.PerformanceSessionAddResp
	PerformanceSessionRemoveReq    = service_pb.PerformanceSessionRemoveReq
	PerformanceSessionRetrieveReq  = service_pb.PerformanceSessionRetrieveReq
	PerformanceSessionRetrieveResp = service_pb.PerformanceSessionRetrieveResp
	PerformanceSessionUpdateReq    = service_pb.PerformanceSessionUpdateReq
	PerformanceUpdateReq           = service_pb.PerformanceUpdateReq
	SortItem                       = service_pb.SortItem
	User                           = service_pb.User
	UserAddReq                     = service_pb.UserAddReq
	UserAddResp                    = service_pb.UserAddResp
	UserRemoveReq                  = service_pb.UserRemoveReq
	UserRetrieveReq                = service_pb.UserRetrieveReq
	UserRetrieveResp               = service_pb.UserRetrieveResp
	UserUpdateReq                  = service_pb.UserUpdateReq

	UserService interface {
		// UserAdd 用户表 创建
		UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error)
		// UserUpdate 用户表 更新
		UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// UserRetrieve 用户表 获取
		UserRetrieve(ctx context.Context, in *UserRetrieveReq, opts ...grpc.CallOption) (*UserRetrieveResp, error)
		// UserRemove 用户表 删除
		UserRemove(ctx context.Context, in *UserRemoveReq, opts ...grpc.CallOption) (*EmptyResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

// UserAdd 用户表 创建
func (m *defaultUserService) UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error) {
	client := service_pb.NewUserServiceClient(m.cli.Conn())
	return client.UserAdd(ctx, in, opts...)
}

// UserUpdate 用户表 更新
func (m *defaultUserService) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := service_pb.NewUserServiceClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

// UserRetrieve 用户表 获取
func (m *defaultUserService) UserRetrieve(ctx context.Context, in *UserRetrieveReq, opts ...grpc.CallOption) (*UserRetrieveResp, error) {
	client := service_pb.NewUserServiceClient(m.cli.Conn())
	return client.UserRetrieve(ctx, in, opts...)
}

// UserRemove 用户表 删除
func (m *defaultUserService) UserRemove(ctx context.Context, in *UserRemoveReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := service_pb.NewUserServiceClient(m.cli.Conn())
	return client.UserRemove(ctx, in, opts...)
}
